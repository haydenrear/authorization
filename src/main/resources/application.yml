
stripe:
  webhook-secret: hello
spring:
  dgs:
    graphql:
      enabled: false
  security:
    oauth2:
      client:
        registration:
          cdc:
            provider: cdc
            client-id: cdc-oauth2-client
            client-secret: 234234lkjsldkdjfsd
            scope: profile, email
            authorization-grant-type: authorization_code
            redirect-uri: "{baseUrl}/login/oauth2/code/{registrationId}"
            client-authentication-method: client_secret_post
            # if your provider doesn't have a userinfo endpoint, omit it and map from ID token instead
            # (but then you really want OIDC)
          github:
            client-id: Ov23li6AX6ixxIAZ8llp
            client-secret: ${GITHUB_SECRET:1b9adb0902df6f97555c6c3b2934ab2685406556}
            scope:
              - user
              - user:email
              - read:user
        provider:
          github:
            authorization-uri: http://localhost:8081/oauth2/authorize
            token-uri:         http://localhost:8081/login/oauth/access_token
            user-info-uri:     http://localhost:8081/userinfo
          cdc:
            authorization-uri: http://localhost:8080/oauth2/authorize
            token-uri:         http://localhost:8080/oauth2/token
            user-info-uri:     http://localhost:8080/userinfo
            user-name-attribute: sub
            jwk-set-uri:       http://localhost:8080/oauth2/jwks

  application:
    name: authorization
  aop:
    proxy-target-class: true
    auto: true
  docker:
    compose:
      file: ${DOCKER_COMPOSE_FILE:{{PROJ_DIR}}/src/main/docker/authorization-server/docker-compose.yml}
      lifecycle-management: start_only
      readiness:
        wait: never
      skip:
        in-tests: false
      enabled: ${DOCKER_COMPOSE_ENABLED:true}
  datasource:
    username: postgres
    password: postgres
    url: jdbc:postgresql://${POSTGRES_HOST:localhost}:${POSTGRES_PORT:5433}/${POSTGRES_DATABASE:postgres}
    jdbc-url: jdbc:postgresql://${POSTGRES_HOST:localhost}:${POSTGRES_PORT:5433}/${POSTGRES_DATABASE:postgres}
    hikari:
      username: postgres
      password: postgres
      jdbc-url: jdbc:postgresql://${POSTGRES_HOST:localhost}:${POSTGRES_PORT:5433}/${POSTGRES_DATABASE:postgres}
      driver-class-name: org.postgresql.Driver
    driver-class-name: org.postgresql.Driver
  liquibase:
    enabled: true
    url: jdbc:postgresql://${POSTGRES_HOST:localhost}:${POSTGRES_PORT:5433}/${POSTGRES_DATABASE:postgres}
    user: postgres
    password: postgres
  jpa:
    hibernate:
      ddl-auto: update
management:
  logging:
    export:
      enabled: false
  tracing:
    enabled: false
  otlp:
    metrics:
      export:
        enabled: false
keystore:
  key-path: {{PROJ_DIR}}/keys
  key-name: cdc-key

logging.level.org.springframework.security.oauth2.client: DEBUG
logging.level.org.springframework.security.oauth2.server: DEBUG
